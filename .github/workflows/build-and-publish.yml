name: Build & publish deck-chores
on:
  push:
    tags: ["*"]
  workflow_call:
    inputs:
      ref:
        required: false
        type: string
    secrets:
      DOCKER_AUTH_TOKEN:
        required: true

jobs:
  build-package:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.baipp.package_version }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref || github.ref }}
      - id: baipp
        uses: hynek/build-and-inspect-python-package@v2

  cheeseshop:
    name: Publish to the cheeseshop
    needs: [build-package]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/deck-chores
    permissions:
        id-token: write
    steps:
      - name: Download package
        uses: actions/download-artifact@v6
        with:
          name: Packages
          path: dist
      - name: Upload package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  container-image:
    name: Build & push multi-architecture image
    needs: [build-package]
    env:
      IMAGE_NAME: deck-chores
      DOCKER_IO_USER: funkyfuture
      VERSION: ${{ needs.build-package.outputs.version }}
    runs-on: ubuntu-latest
    steps:

      - uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - uses: redhat-actions/podman-login@v1
        with:
          registry: docker.io
          username: ${{ env.DOCKER_IO_USER }}
          password: ${{ secrets.DOCKER_AUTH_TOKEN }}

      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref || github.ref }}

      - shell: bash
        run: >
          echo "PRERELEASE=${{ (
             contains('a', env.VERSION)  || contains('b', env.VERSION)
          || contains('rc', env.VERSION) || contains('pre', env.VERSION)
          ) }}" >> $GITHUB_ENV
      - name: echo version related variables
        shell: bash
        run: |
          echo 'VERSION: ${{ env.VERSION }}'
          echo 'PRERELEASE: ${{ env.PRERELEASE }}'
      - id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: latest=false
          labels: |
            org.opencontainers.image.documentation=https://deck-chores.readthedocs.org/
            org.opencontainers.image.url=https://deck-chores.readthedocs.org/
          tags: |
            type=sha,prefix=src-commit-
            type=pep440,pattern={{version}},value=${{ env.VERSION }}
            type=pep440,pattern={{major}},value=${{ env.VERSION }},enable=${{ env.PRERELEASE == 'false' }}
            type=pep440,pattern={{major}}.{{minor}},value=${{ env.VERSION }},enable=${{ env.PRERELEASE == 'false' }}
      - name: prepare push tag value
        id: push-tags-value
        shell: bash
        run: echo "tags=${{ steps.docker-metadata.outputs.tags }}" | tr "\n" " " | sed "s/${{ env.IMAGE_NAME }}://g" >> $GITHUB_OUTPUT

      - name: install dependency for multi-platform builds
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static
      - id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Dockerfile
          image: ${{ env.IMAGE_NAME }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          # platforms: linux/amd64,linux/arm,linux/arm64
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.docker-metadata.outputs.tags }}

      - name: echo build outputs
        shell: bash
        run: |
          echo "Image: ${{ steps.build-image.outputs.image }}"
          echo "Tags: ${{ steps.build-image.outputs.tags }}"
          echo "Tagged Image: ${{ steps.build-image.outputs.image-with-tag }}"
      - name: echo created images
        shell: bash
        run: buildah images | grep '${{ env.IMAGE_NAME }}'
      - name: echo image metadata
        shell: bash
        run: buildah inspect ${{ steps.build-image.outputs.image-with-tag }}

      - name: push to ghcr.io
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: ghcr.io/${{ github.actor }}
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.push-tags-value.outputs.tags }}

      - name: push to docker.io
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: docker.io/${{ env.DOCKER_IO_USER }}
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.push-tags-value.outputs.tags }}
